@page "/fetchdata"
@using MoneyTrackr.ApiClient.APIs
@using MoneyTrackr.Shared.DTOs
@using System.Text
@inject IRolesAPI Api

<PageTitle>@PageTitlePrefix - Roles</PageTitle>

<h1>Roles</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (roles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>@AddWhiteSpace(FinanceManagementLevel)</th>
                <th>@AddWhiteSpace(UserManagementLevel)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var role in roles)
            {
                <tr>
                    <td>@role.Id</td>
                    <td>@role.Name</td>
                    <td>@GetClaimValue(role.Claims, FinanceManagementLevel)</td>
                    <td>@GetClaimValue(role.Claims, UserManagementLevel)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<RoleDto>? roles;

    protected override async Task OnInitializedAsync()
    {
        roles = await Api.GetRolesAsync();
    }

    private string AddWhiteSpace(string str)
    {
        StringBuilder builder = new();

        foreach (char c in str)
        {
            if (char.IsUpper(c))
                builder.Append(" ");

            builder.Append(c);
        }

        return builder.ToString();
    }

    private string GetClaimValue(RoleClaimDto?[] claims, string claimToGet)
    {
        RoleClaimDto? claim = claims?
            .Where(c => c is not null && c.Type == claimToGet)
            .FirstOrDefault();

        if (claim is null)
            return "None";

        return AddWhiteSpace(claim.Value);
    }
}
